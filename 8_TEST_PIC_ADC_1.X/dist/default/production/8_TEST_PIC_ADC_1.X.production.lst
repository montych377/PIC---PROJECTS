

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Jan 19 16:03:58 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    10                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	text11,local,class=CODE,merge=1,delta=2
    20                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    22                           	dabs	1,0x7E,2
    23     0000                     
    24                           ; Version 2.40
    25                           ; Generated 17/11/2021 GMT
    26                           ; 
    27                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution. Publication is not required when
    41                           ;        this file is used in an embedded application.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F877A Definitions
    57                           ; 
    58                           ; SFR Addresses
    59     0000                     	;# 
    60     0001                     	;# 
    61     0002                     	;# 
    62     0003                     	;# 
    63     0004                     	;# 
    64     0005                     	;# 
    65     0006                     	;# 
    66     0007                     	;# 
    67     0008                     	;# 
    68     0009                     	;# 
    69     000A                     	;# 
    70     000B                     	;# 
    71     000C                     	;# 
    72     000D                     	;# 
    73     000E                     	;# 
    74     000E                     	;# 
    75     000F                     	;# 
    76     0010                     	;# 
    77     0011                     	;# 
    78     0012                     	;# 
    79     0013                     	;# 
    80     0014                     	;# 
    81     0015                     	;# 
    82     0015                     	;# 
    83     0016                     	;# 
    84     0017                     	;# 
    85     0018                     	;# 
    86     0019                     	;# 
    87     001A                     	;# 
    88     001B                     	;# 
    89     001B                     	;# 
    90     001C                     	;# 
    91     001D                     	;# 
    92     001E                     	;# 
    93     001F                     	;# 
    94     0081                     	;# 
    95     0085                     	;# 
    96     0086                     	;# 
    97     0087                     	;# 
    98     0088                     	;# 
    99     0089                     	;# 
   100     008C                     	;# 
   101     008D                     	;# 
   102     008E                     	;# 
   103     0091                     	;# 
   104     0092                     	;# 
   105     0093                     	;# 
   106     0094                     	;# 
   107     0098                     	;# 
   108     0099                     	;# 
   109     009C                     	;# 
   110     009D                     	;# 
   111     009E                     	;# 
   112     009F                     	;# 
   113     010C                     	;# 
   114     010D                     	;# 
   115     010E                     	;# 
   116     010F                     	;# 
   117     018C                     	;# 
   118     018D                     	;# 
   119     0000                     	;# 
   120     0001                     	;# 
   121     0002                     	;# 
   122     0003                     	;# 
   123     0004                     	;# 
   124     0005                     	;# 
   125     0006                     	;# 
   126     0007                     	;# 
   127     0008                     	;# 
   128     0009                     	;# 
   129     000A                     	;# 
   130     000B                     	;# 
   131     000C                     	;# 
   132     000D                     	;# 
   133     000E                     	;# 
   134     000E                     	;# 
   135     000F                     	;# 
   136     0010                     	;# 
   137     0011                     	;# 
   138     0012                     	;# 
   139     0013                     	;# 
   140     0014                     	;# 
   141     0015                     	;# 
   142     0015                     	;# 
   143     0016                     	;# 
   144     0017                     	;# 
   145     0018                     	;# 
   146     0019                     	;# 
   147     001A                     	;# 
   148     001B                     	;# 
   149     001B                     	;# 
   150     001C                     	;# 
   151     001D                     	;# 
   152     001E                     	;# 
   153     001F                     	;# 
   154     0081                     	;# 
   155     0085                     	;# 
   156     0086                     	;# 
   157     0087                     	;# 
   158     0088                     	;# 
   159     0089                     	;# 
   160     008C                     	;# 
   161     008D                     	;# 
   162     008E                     	;# 
   163     0091                     	;# 
   164     0092                     	;# 
   165     0093                     	;# 
   166     0094                     	;# 
   167     0098                     	;# 
   168     0099                     	;# 
   169     009C                     	;# 
   170     009D                     	;# 
   171     009E                     	;# 
   172     009F                     	;# 
   173     010C                     	;# 
   174     010D                     	;# 
   175     010E                     	;# 
   176     010F                     	;# 
   177     018C                     	;# 
   178     018D                     	;# 
   179     0000                     	;# 
   180     0001                     	;# 
   181     0002                     	;# 
   182     0003                     	;# 
   183     0004                     	;# 
   184     0005                     	;# 
   185     0006                     	;# 
   186     0007                     	;# 
   187     0008                     	;# 
   188     0009                     	;# 
   189     000A                     	;# 
   190     000B                     	;# 
   191     000C                     	;# 
   192     000D                     	;# 
   193     000E                     	;# 
   194     000E                     	;# 
   195     000F                     	;# 
   196     0010                     	;# 
   197     0011                     	;# 
   198     0012                     	;# 
   199     0013                     	;# 
   200     0014                     	;# 
   201     0015                     	;# 
   202     0015                     	;# 
   203     0016                     	;# 
   204     0017                     	;# 
   205     0018                     	;# 
   206     0019                     	;# 
   207     001A                     	;# 
   208     001B                     	;# 
   209     001B                     	;# 
   210     001C                     	;# 
   211     001D                     	;# 
   212     001E                     	;# 
   213     001F                     	;# 
   214     0081                     	;# 
   215     0085                     	;# 
   216     0086                     	;# 
   217     0087                     	;# 
   218     0088                     	;# 
   219     0089                     	;# 
   220     008C                     	;# 
   221     008D                     	;# 
   222     008E                     	;# 
   223     0091                     	;# 
   224     0092                     	;# 
   225     0093                     	;# 
   226     0094                     	;# 
   227     0098                     	;# 
   228     0099                     	;# 
   229     009C                     	;# 
   230     009D                     	;# 
   231     009E                     	;# 
   232     009F                     	;# 
   233     010C                     	;# 
   234     010D                     	;# 
   235     010E                     	;# 
   236     010F                     	;# 
   237     018C                     	;# 
   238     018D                     	;# 
   239                           
   240                           	psect	strings
   241     0003                     __pstrings:
   242     0003                     stringtab:
   243     0003                     __stringtab:
   244                           
   245                           ;	String table - string pointers are 1 byte each
   246     0003  1BFF               	btfsc	btemp+1,7
   247     0004  280D               	ljmp	stringcode
   248     0005  1383               	bcf	3,7
   249     0006  187F               	btfsc	btemp+1,0
   250     0007  1783               	bsf	3,7
   251     0008  0800               	movf	0,w
   252     0009  0A84               	incf	4,f
   253     000A  1903               	skipnz
   254     000B  0AFF               	incf	btemp+1,f
   255     000C  0008               	return
   256     000D                     stringcode:
   257     000D                     stringdir:
   258     000D  3000               	movlw	high stringdir
   259     000E  008A               	movwf	10
   260     000F  0804               	movf	4,w
   261     0010  0A84               	incf	4,f
   262     0011  0782               	addwf	2,f
   263     0012                     __stringbase:
   264     0012  3400               	retlw	0
   265     0013                     __end_of__stringtab:
   266     0013                     _dpowers:
   267     0013  3401               	retlw	1
   268     0014  3400               	retlw	0
   269     0015  340A               	retlw	10
   270     0016  3400               	retlw	0
   271     0017  3464               	retlw	100
   272     0018  3400               	retlw	0
   273     0019  34E8               	retlw	232
   274     001A  3403               	retlw	3
   275     001B  3410               	retlw	16
   276     001C  3427               	retlw	39
   277     001D                     __end_of_dpowers:
   278     0007                     _PORTC	set	7
   279     0008                     _PORTD	set	8
   280     001E                     _ADRESH	set	30
   281     001F                     _ADCON0	set	31
   282     00FA                     _GO_nDONE	set	250
   283     0087                     _TRISC	set	135
   284     0088                     _TRISD	set	136
   285     009E                     _ADRESL	set	158
   286     009F                     _ADCON1	set	159
   287     001D                     STR_1:
   288     001D  3443               	retlw	67	;'C'
   289     001E  346F               	retlw	111	;'o'
   290     001F  346E               	retlw	110	;'n'
   291     0020  3476               	retlw	118	;'v'
   292     0021  3465               	retlw	101	;'e'
   293     0022  3472               	retlw	114	;'r'
   294     0023  3474               	retlw	116	;'t'
   295     0024  3420               	retlw	32	;' '
   296     0025  3456               	retlw	86	;'V'
   297     0026  346F               	retlw	111	;'o'
   298     0027  346C               	retlw	108	;'l'
   299     0028  342D               	retlw	45	;'-'
   300     0029  343E               	retlw	62	;'>'
   301     002A  3474               	retlw	116	;'t'
   302     002B  3465               	retlw	101	;'e'
   303     002C  346D               	retlw	109	;'m'
   304     002D  3470               	retlw	112	;'p'
   305     002E  3400               	retlw	0
   306     002F                     STR_2:
   307     002F  3454               	retlw	84	;'T'
   308     0030  3465               	retlw	101	;'e'
   309     0031  346D               	retlw	109	;'m'
   310     0032  3470               	retlw	112	;'p'
   311     0033  3465               	retlw	101	;'e'
   312     0034  3472               	retlw	114	;'r'
   313     0035  3461               	retlw	97	;'a'
   314     0036  3474               	retlw	116	;'t'
   315     0037  3475               	retlw	117	;'u'
   316     0038  3472               	retlw	114	;'r'
   317     0039  3465               	retlw	101	;'e'
   318     003A  3420               	retlw	32	;' '
   319     003B  343D               	retlw	61	;'='
   320     003C  3420               	retlw	32	;' '
   321     003D  3425               	retlw	37	;'%'
   322     003E  3464               	retlw	100	;'d'
   323     003F  3400               	retlw	0
   324                           
   325                           	psect	cinit
   326     07FC                     start_initialization:	
   327                           ; #config settings
   328                           
   329     07FC                     __initialization:
   330     07FC                     end_of_initialization:	
   331                           ;End of C runtime variable initialization code
   332                           
   333     07FC                     __end_of__initialization:
   334     07FC  0183               	clrf	3
   335     07FD  120A  118A  2EAF   	ljmp	_main	;jump to C main() function
   336                           
   337                           	psect	cstackCOMMON
   338     0070                     __pcstackCOMMON:
   339     0070                     ?_lcd_init:
   340     0070                     ?_lcd_cmd:	
   341                           ; 1 bytes @ 0x0
   342                           
   343     0070                     ??_lcd_cmd:	
   344                           ; 1 bytes @ 0x0
   345                           
   346     0070                     ?_ADC_Initialize:	
   347                           ; 1 bytes @ 0x0
   348                           
   349     0070                     ??_ADC_Initialize:	
   350                           ; 1 bytes @ 0x0
   351                           
   352     0070                     ?_lcd_data:	
   353                           ; 1 bytes @ 0x0
   354                           
   355     0070                     ??_lcd_data:	
   356                           ; 1 bytes @ 0x0
   357                           
   358     0070                     ?_ADC_Read:	
   359                           ; 1 bytes @ 0x0
   360                           
   361     0070                     ?___wmul:	
   362                           ; 2 bytes @ 0x0
   363                           
   364     0070                     ?___lwdiv:	
   365                           ; 2 bytes @ 0x0
   366                           
   367     0070                     ___wmul@multiplier:	
   368                           ; 2 bytes @ 0x0
   369                           
   370     0070                     ___lwdiv@divisor:	
   371                           ; 2 bytes @ 0x0
   372                           
   373                           
   374                           ; 2 bytes @ 0x0
   375     0070                     	ds	1
   376     0071                     lcd_cmd@cmd:
   377     0071                     lcd_data@data:	
   378                           ; 1 bytes @ 0x1
   379                           
   380                           
   381                           ; 1 bytes @ 0x1
   382     0071                     	ds	1
   383     0072                     ??_lcd_init:
   384     0072                     ?_lcd_str:	
   385                           ; 1 bytes @ 0x2
   386                           
   387     0072                     ??_ADC_Read:	
   388                           ; 1 bytes @ 0x2
   389                           
   390     0072                     lcd_str@ptr:	
   391                           ; 1 bytes @ 0x2
   392                           
   393     0072                     ___wmul@multiplicand:	
   394                           ; 2 bytes @ 0x2
   395                           
   396     0072                     ___lwdiv@dividend:	
   397                           ; 2 bytes @ 0x2
   398                           
   399                           
   400                           ; 2 bytes @ 0x2
   401     0072                     	ds	2
   402     0074                     ??_lcd_str:
   403     0074                     ??___wmul:	
   404                           ; 1 bytes @ 0x4
   405                           
   406     0074                     ??___lwdiv:	
   407                           ; 1 bytes @ 0x4
   408                           
   409     0074                     ___wmul@product:	
   410                           ; 1 bytes @ 0x4
   411                           
   412                           
   413                           ; 2 bytes @ 0x4
   414     0074                     	ds	1
   415     0075                     ___lwdiv@quotient:
   416                           
   417                           ; 2 bytes @ 0x5
   418     0075                     	ds	1
   419     0076                     ?___awdiv:
   420     0076                     ___awdiv@divisor:	
   421                           ; 2 bytes @ 0x6
   422                           
   423                           
   424                           ; 2 bytes @ 0x6
   425     0076                     	ds	1
   426     0077                     ___lwdiv@counter:
   427                           
   428                           ; 1 bytes @ 0x7
   429     0077                     	ds	1
   430     0078                     ?___lwmod:
   431     0078                     ___awdiv@dividend:	
   432                           ; 2 bytes @ 0x8
   433                           
   434     0078                     ___lwmod@divisor:	
   435                           ; 2 bytes @ 0x8
   436                           
   437                           
   438                           ; 2 bytes @ 0x8
   439     0078                     	ds	2
   440     007A                     ??___awdiv:
   441     007A                     ___lwmod@dividend:	
   442                           ; 1 bytes @ 0xA
   443                           
   444                           
   445                           ; 2 bytes @ 0xA
   446     007A                     	ds	2
   447     007C                     ??___lwmod:
   448                           
   449                           ; 1 bytes @ 0xC
   450     007C                     	ds	1
   451     007D                     ___lwmod@counter:
   452                           
   453                           ; 1 bytes @ 0xD
   454     007D                     	ds	1
   455                           
   456                           	psect	cstackBANK0
   457     0020                     __pcstackBANK0:
   458     0020                     ?_sprintf:
   459     0020                     sprintf@f:	
   460                           ; 2 bytes @ 0x0
   461                           
   462     0020                     ___awdiv@counter:	
   463                           ; 1 bytes @ 0x0
   464                           
   465                           
   466                           ; 1 bytes @ 0x0
   467     0020                     	ds	1
   468     0021                     ___awdiv@sign:
   469                           
   470                           ; 1 bytes @ 0x1
   471     0021                     	ds	1
   472     0022                     ___awdiv@quotient:
   473                           
   474                           ; 2 bytes @ 0x2
   475     0022                     	ds	1
   476     0023                     ??_sprintf:
   477                           
   478                           ; 1 bytes @ 0x3
   479     0023                     	ds	3
   480     0026                     sprintf@ap:
   481                           
   482                           ; 1 bytes @ 0x6
   483     0026                     	ds	1
   484     0027                     sprintf@flag:
   485                           
   486                           ; 1 bytes @ 0x7
   487     0027                     	ds	1
   488     0028                     sprintf@prec:
   489                           
   490                           ; 1 bytes @ 0x8
   491     0028                     	ds	1
   492     0029                     sprintf@val:
   493                           
   494                           ; 2 bytes @ 0x9
   495     0029                     	ds	2
   496     002B                     sprintf@sp:
   497                           
   498                           ; 1 bytes @ 0xB
   499     002B                     	ds	1
   500     002C                     sprintf@c:
   501                           
   502                           ; 1 bytes @ 0xC
   503     002C                     	ds	1
   504     002D                     ?_main:
   505     002D                     main@argc:	
   506                           ; 2 bytes @ 0xD
   507                           
   508                           
   509                           ; 2 bytes @ 0xD
   510     002D                     	ds	2
   511     002F                     main@argv:
   512                           
   513                           ; 2 bytes @ 0xF
   514     002F                     	ds	2
   515     0031                     ??_main:
   516                           
   517                           ; 1 bytes @ 0x11
   518     0031                     	ds	2
   519     0033                     main@arr:
   520                           
   521                           ; 15 bytes @ 0x13
   522     0033                     	ds	15
   523     0042                     main@data:
   524                           
   525                           ; 2 bytes @ 0x22
   526     0042                     	ds	2
   527     0044                     main@temp:
   528                           
   529                           ; 2 bytes @ 0x24
   530     0044                     	ds	2
   531                           
   532                           	psect	maintext
   533     06AF                     __pmaintext:	
   534 ;;
   535 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   536 ;;
   537 ;; *************** function _main *****************
   538 ;; Defined at:
   539 ;;		line 30 in file "Main_ADC.c"
   540 ;; Parameters:    Size  Location     Type
   541 ;;  argc            2   13[BANK0 ] int 
   542 ;;  argv            2   15[BANK0 ] PTR PTR unsigned char 
   543 ;; Auto vars:     Size  Location     Type
   544 ;;  temp            2   36[BANK0 ] int 
   545 ;;  data            2   34[BANK0 ] int 
   546 ;;  arr            15   19[BANK0 ] unsigned char [15]
   547 ;; Return value:  Size  Location     Type
   548 ;;                  2   13[BANK0 ] int 
   549 ;; Registers used:
   550 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   551 ;; Tracked objects:
   552 ;;		On entry : B00/0
   553 ;;		On exit  : 0/0
   554 ;;		Unchanged: 0/0
   555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   556 ;;      Params:         0       4       0       0       0
   557 ;;      Locals:         0      19       0       0       0
   558 ;;      Temps:          0       2       0       0       0
   559 ;;      Totals:         0      25       0       0       0
   560 ;;Total ram usage:       25 bytes
   561 ;; Hardware stack levels required when called: 2
   562 ;; This function calls:
   563 ;;		_ADC_Initialize
   564 ;;		_ADC_Read
   565 ;;		___awdiv
   566 ;;		___wmul
   567 ;;		_lcd_cmd
   568 ;;		_lcd_init
   569 ;;		_lcd_str
   570 ;;		_sprintf
   571 ;; This function is called by:
   572 ;;		Startup code after reset
   573 ;; This function uses a non-reentrant model
   574 ;;
   575                           
   576     06AF                     _main:	
   577                           ;psect for function _main
   578                           
   579     06AF                     l1192:	
   580                           ;incstack = 0
   581                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   582                           
   583                           
   584                           ;Main_ADC.c: 31:     TRISD = 0x00;
   585     06AF  1683               	bsf	3,5	;RP0=1, select bank1
   586     06B0  1303               	bcf	3,6	;RP1=0, select bank1
   587     06B1  0188               	clrf	8	;volatile
   588                           
   589                           ;Main_ADC.c: 32:     TRISC = 0x00;
   590     06B2  0187               	clrf	7	;volatile
   591     06B3                     l1194:
   592                           
   593                           ;Main_ADC.c: 33:     char arr[15];;Main_ADC.c: 34:     ADC_Initialize();
   594     06B3  120A  118A  24D7  120A  118A  	fcall	_ADC_Initialize
   595     06B8                     l1196:
   596                           
   597                           ;Main_ADC.c: 35:     lcd_init();
   598     06B8  120A  118A  24EE  120A  118A  	fcall	_lcd_init
   599     06BD                     l1198:
   600                           
   601                           ;Main_ADC.c: 37:         int data = ADC_Read();
   602     06BD  120A  118A  24E0  120A  118A  	fcall	_ADC_Read
   603     06C2  0871               	movf	?_ADC_Read+1,w
   604     06C3  1283               	bcf	3,5	;RP0=0, select bank0
   605     06C4  1303               	bcf	3,6	;RP1=0, select bank0
   606     06C5  00C3               	movwf	main@data+1
   607     06C6  0870               	movf	?_ADC_Read,w
   608     06C7  00C2               	movwf	main@data
   609     06C8                     l1200:
   610                           
   611                           ;Main_ADC.c: 38:         lcd_cmd(0x80);
   612     06C8  3080               	movlw	128
   613     06C9  120A  118A  25C7  120A  118A  	fcall	_lcd_cmd
   614     06CE                     l1202:
   615                           
   616                           ;Main_ADC.c: 39:         lcd_str("Convert Vol->temp");
   617     06CE  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   618     06CF  00F2               	movwf	lcd_str@ptr
   619     06D0  3080               	movlw	128
   620     06D1  00F3               	movwf	lcd_str@ptr+1
   621     06D2  120A  118A  2532  120A  118A  	fcall	_lcd_str
   622     06D7                     l1204:
   623                           
   624                           ;Main_ADC.c: 40:         int temp = (data*500)/1023;
   625     06D7  30FF               	movlw	255
   626     06D8  00F6               	movwf	___awdiv@divisor
   627     06D9  3003               	movlw	3
   628     06DA  00F7               	movwf	___awdiv@divisor+1
   629     06DB  1283               	bcf	3,5	;RP0=0, select bank0
   630     06DC  1303               	bcf	3,6	;RP1=0, select bank0
   631     06DD  0843               	movf	main@data+1,w
   632     06DE  00F1               	movwf	___wmul@multiplier+1
   633     06DF  0842               	movf	main@data,w
   634     06E0  00F0               	movwf	___wmul@multiplier
   635     06E1  30F4               	movlw	244
   636     06E2  00F2               	movwf	___wmul@multiplicand
   637     06E3  3001               	movlw	1
   638     06E4  00F3               	movwf	___wmul@multiplicand+1
   639     06E5  120A  118A  250D  120A  118A  	fcall	___wmul
   640     06EA  0871               	movf	?___wmul+1,w
   641     06EB  00F9               	movwf	___awdiv@dividend+1
   642     06EC  0870               	movf	?___wmul,w
   643     06ED  00F8               	movwf	___awdiv@dividend
   644     06EE  120A  118A  2646  120A  118A  	fcall	___awdiv
   645     06F3  0877               	movf	?___awdiv+1,w
   646     06F4  1283               	bcf	3,5	;RP0=0, select bank0
   647     06F5  1303               	bcf	3,6	;RP1=0, select bank0
   648     06F6  00C5               	movwf	main@temp+1
   649     06F7  0876               	movf	?___awdiv,w
   650     06F8  00C4               	movwf	main@temp
   651     06F9                     l1206:
   652                           
   653                           ;Main_ADC.c: 41:         sprintf(arr,"Temperature = %d",temp);
   654     06F9  301D               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   655     06FA  00A0               	movwf	sprintf@f
   656     06FB  0845               	movf	main@temp+1,w
   657     06FC  00A2               	movwf	?_sprintf+2
   658     06FD  0844               	movf	main@temp,w
   659     06FE  00A1               	movwf	?_sprintf+1
   660     06FF  3033               	movlw	(low (main@arr| 0))& (0+255)
   661     0700  120A  118A  2722  120A  118A  	fcall	_sprintf
   662     0705                     l1208:
   663                           
   664                           ;Main_ADC.c: 42:         lcd_cmd(0xc0);
   665     0705  30C0               	movlw	192
   666     0706  120A  118A  25C7  120A  118A  	fcall	_lcd_cmd
   667     070B                     l1210:
   668                           
   669                           ;Main_ADC.c: 43:         lcd_str(arr);
   670     070B  3033               	movlw	(low (main@arr| 0))& (0+255)
   671     070C  00F2               	movwf	lcd_str@ptr
   672     070D  3000               	movlw	0
   673     070E  00F3               	movwf	lcd_str@ptr+1
   674     070F  120A  118A  2532  120A  118A  	fcall	_lcd_str
   675     0714                     l1212:
   676                           
   677                           ;Main_ADC.c: 44:         _delay((unsigned long)((10)*(1000000/4000.0)));
   678     0714  3004               	movlw	4
   679     0715  1283               	bcf	3,5	;RP0=0, select bank0
   680     0716  1303               	bcf	3,6	;RP1=0, select bank0
   681     0717  00B2               	movwf	??_main+1
   682     0718  303D               	movlw	61
   683     0719  00B1               	movwf	??_main
   684     071A                     u777:
   685     071A  0BB1               	decfsz	??_main,f
   686     071B  2F1A               	goto	u777
   687     071C  0BB2               	decfsz	??_main+1,f
   688     071D  2F1A               	goto	u777
   689     071E  2EBD               	goto	l1198
   690     071F  120A  118A  2800   	ljmp	start
   691     0722                     __end_of_main:
   692                           
   693                           	psect	text1
   694     0722                     __ptext1:	
   695 ;; *************** function _sprintf *****************
   696 ;; Defined at:
   697 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c"
   698 ;; Parameters:    Size  Location     Type
   699 ;;  sp              1    wreg     PTR unsigned char 
   700 ;;		 -> main@arr(15), 
   701 ;;  f               1    0[BANK0 ] PTR const unsigned char 
   702 ;;		 -> STR_2(17), 
   703 ;; Auto vars:     Size  Location     Type
   704 ;;  sp              1   11[BANK0 ] PTR unsigned char 
   705 ;;		 -> main@arr(15), 
   706 ;;  tmpval          4    0        struct .
   707 ;;  val             2    9[BANK0 ] unsigned int 
   708 ;;  cp              2    0        PTR const unsigned char 
   709 ;;  len             2    0        unsigned int 
   710 ;;  c               1   12[BANK0 ] unsigned char 
   711 ;;  prec            1    8[BANK0 ] char 
   712 ;;  flag            1    7[BANK0 ] unsigned char 
   713 ;;  ap              1    6[BANK0 ] PTR void [1]
   714 ;;		 -> ?_sprintf(2), 
   715 ;; Return value:  Size  Location     Type
   716 ;;                  2    0[BANK0 ] int 
   717 ;; Registers used:
   718 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   719 ;; Tracked objects:
   720 ;;		On entry : 0/0
   721 ;;		On exit  : 0/0
   722 ;;		Unchanged: 0/0
   723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   724 ;;      Params:         0       3       0       0       0
   725 ;;      Locals:         0       7       0       0       0
   726 ;;      Temps:          0       3       0       0       0
   727 ;;      Totals:         0      13       0       0       0
   728 ;;Total ram usage:       13 bytes
   729 ;; Hardware stack levels used: 1
   730 ;; Hardware stack levels required when called: 1
   731 ;; This function calls:
   732 ;;		___lwdiv
   733 ;;		___lwmod
   734 ;; This function is called by:
   735 ;;		_main
   736 ;; This function uses a non-reentrant model
   737 ;;
   738                           
   739     0722                     _sprintf:	
   740                           ;psect for function _sprintf
   741                           
   742                           
   743                           ;incstack = 0
   744                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   745                           ;sprintf@sp stored from wreg
   746     0722  1283               	bcf	3,5	;RP0=0, select bank0
   747     0723  1303               	bcf	3,6	;RP1=0, select bank0
   748     0724  00AB               	movwf	sprintf@sp
   749     0725                     l1072:
   750                           
   751                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
   752     0725  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   753     0726  00A6               	movwf	sprintf@ap
   754                           
   755                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   756     0727  2FE7               	goto	l1124
   757     0728                     l1074:
   758                           
   759                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   760     0728  3025               	movlw	37
   761     0729  062C               	xorwf	sprintf@c,w
   762     072A  1903               	btfsc	3,2
   763     072B  2F2D               	goto	u561
   764     072C  2F2E               	goto	u560
   765     072D                     u561:
   766     072D  2F38               	goto	l1080
   767     072E                     u560:
   768     072E                     l1076:
   769                           
   770                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   771     072E  082B               	movf	sprintf@sp,w
   772     072F  0084               	movwf	4
   773     0730  082C               	movf	sprintf@c,w
   774     0731  1383               	bcf	3,7	;select IRP bank0
   775     0732  0080               	movwf	0
   776     0733                     l1078:
   777     0733  3001               	movlw	1
   778     0734  00A3               	movwf	??_sprintf
   779     0735  0823               	movf	??_sprintf,w
   780     0736  07AB               	addwf	sprintf@sp,f
   781                           
   782                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 559:    continue;
   783     0737  2FE7               	goto	l1124
   784     0738                     l1080:
   785                           
   786                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   787     0738  01A7               	clrf	sprintf@flag
   788     0739                     l1084:	
   789                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
   790                           
   791     0739  3001               	movlw	1
   792     073A  07A0               	addwf	sprintf@f,f
   793     073B  30FF               	movlw	-1
   794     073C  0720               	addwf	sprintf@f,w
   795     073D  0084               	movwf	4
   796     073E  120A  118A  200D  120A  118A  	fcall	stringdir
   797     0743  00AC               	movwf	sprintf@c
   798     0744  00A3               	movwf	??_sprintf
   799     0745  01A4               	clrf	??_sprintf+1
   800                           
   801                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   802                           ; Switch size 1, requested type "simple"
   803                           ; Number of cases is 1, Range of values is 0 to 0
   804                           ; switch strategies available:
   805                           ; Name         Instructions Cycles
   806                           ; simple_byte            4     3 (average)
   807                           ; direct_byte           11     8 (fixed)
   808                           ; jumptable            260     6 (fixed)
   809                           ;	Chosen strategy is simple_byte
   810     0746  0824               	movf	??_sprintf+1,w
   811     0747  3A00               	xorlw	0	; case 0
   812     0748  1903               	skipnz
   813     0749  2F4B               	goto	l1234
   814     074A  2FE7               	goto	l1124
   815     074B                     l1234:
   816                           
   817                           ; Switch size 1, requested type "simple"
   818                           ; Number of cases is 3, Range of values is 0 to 105
   819                           ; switch strategies available:
   820                           ; Name         Instructions Cycles
   821                           ; simple_byte           10     6 (average)
   822                           ; jumptable            260     6 (fixed)
   823                           ;	Chosen strategy is simple_byte
   824     074B  0823               	movf	??_sprintf,w
   825     074C  3A00               	xorlw	0	; case 0
   826     074D  1903               	skipnz
   827     074E  2FF7               	goto	l1126
   828     074F  3A64               	xorlw	100	; case 100
   829     0750  1903               	skipnz
   830     0751  2F56               	goto	l1086
   831     0752  3A0D               	xorlw	13	; case 105
   832     0753  1903               	skipnz
   833     0754  2F56               	goto	l1086
   834     0755  2FE7               	goto	l1124
   835     0756                     l1086:
   836                           
   837                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
   838     0756  0826               	movf	sprintf@ap,w
   839     0757  0084               	movwf	4
   840     0758  1383               	bcf	3,7	;select IRP bank0
   841     0759  0800               	movf	0,w
   842     075A  00A9               	movwf	sprintf@val
   843     075B  0A84               	incf	4,f
   844     075C  0800               	movf	0,w
   845     075D  00AA               	movwf	sprintf@val+1
   846     075E                     l1088:
   847     075E  3002               	movlw	2
   848     075F  00A3               	movwf	??_sprintf
   849     0760  0823               	movf	??_sprintf,w
   850     0761  07A6               	addwf	sprintf@ap,f
   851     0762                     l1090:
   852                           
   853                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
   854     0762  1FAA               	btfss	sprintf@val+1,7
   855     0763  2F65               	goto	u571
   856     0764  2F66               	goto	u570
   857     0765                     u571:
   858     0765  2F6F               	goto	l1096
   859     0766                     u570:
   860     0766                     l1092:
   861                           
   862                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
   863     0766  3003               	movlw	3
   864     0767  00A3               	movwf	??_sprintf
   865     0768  0823               	movf	??_sprintf,w
   866     0769  04A7               	iorwf	sprintf@flag,f
   867     076A                     l1094:
   868                           
   869                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
   870     076A  09A9               	comf	sprintf@val,f
   871     076B  09AA               	comf	sprintf@val+1,f
   872     076C  0AA9               	incf	sprintf@val,f
   873     076D  1903               	skipnz
   874     076E  0AAA               	incf	sprintf@val+1,f
   875     076F                     l1096:
   876                           
   877                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
   878     076F  01AC               	clrf	sprintf@c
   879     0770  0AAC               	incf	sprintf@c,f
   880     0771                     l1102:
   881                           
   882                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
   883     0771  082C               	movf	sprintf@c,w
   884     0772  00A3               	movwf	??_sprintf
   885     0773  0723               	addwf	??_sprintf,w
   886     0774  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   887     0775  0084               	movwf	4
   888     0776  120A  118A  200D  120A  118A  	fcall	stringdir
   889     077B  00A4               	movwf	??_sprintf+1
   890     077C  120A  118A  200D  120A  118A  	fcall	stringdir
   891     0781  00A5               	movwf	??_sprintf+2
   892     0782  0825               	movf	??_sprintf+2,w
   893     0783  022A               	subwf	sprintf@val+1,w
   894     0784  1D03               	skipz
   895     0785  2F88               	goto	u585
   896     0786  0824               	movf	??_sprintf+1,w
   897     0787  0229               	subwf	sprintf@val,w
   898     0788                     u585:
   899     0788  1803               	skipnc
   900     0789  2F8B               	goto	u581
   901     078A  2F8C               	goto	u580
   902     078B                     u581:
   903     078B  2F8D               	goto	l1106
   904     078C                     u580:
   905     078C  2F97               	goto	l1108
   906     078D                     l1106:
   907     078D  3001               	movlw	1
   908     078E  00A3               	movwf	??_sprintf
   909     078F  0823               	movf	??_sprintf,w
   910     0790  07AC               	addwf	sprintf@c,f
   911     0791  3005               	movlw	5
   912     0792  062C               	xorwf	sprintf@c,w
   913     0793  1D03               	btfss	3,2
   914     0794  2F96               	goto	u591
   915     0795  2F97               	goto	u590
   916     0796                     u591:
   917     0796  2F71               	goto	l1102
   918     0797                     u590:
   919     0797                     l1108:
   920                           
   921                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
   922     0797  0827               	movf	sprintf@flag,w
   923     0798  3903               	andlw	3
   924     0799  1903               	btfsc	3,2
   925     079A  2F9C               	goto	u601
   926     079B  2F9D               	goto	u600
   927     079C                     u601:
   928     079C  2FA6               	goto	l1114
   929     079D                     u600:
   930     079D                     l1110:
   931                           
   932                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
   933     079D  082B               	movf	sprintf@sp,w
   934     079E  0084               	movwf	4
   935     079F  302D               	movlw	45
   936     07A0  1383               	bcf	3,7	;select IRP bank0
   937     07A1  0080               	movwf	0
   938     07A2                     l1112:
   939     07A2  3001               	movlw	1
   940     07A3  00A3               	movwf	??_sprintf
   941     07A4  0823               	movf	??_sprintf,w
   942     07A5  07AB               	addwf	sprintf@sp,f
   943     07A6                     l1114:
   944                           
   945                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
   946     07A6  082C               	movf	sprintf@c,w
   947     07A7  00A8               	movwf	sprintf@prec
   948                           
   949                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
   950     07A8  2FDE               	goto	l1122
   951     07A9                     l1116:
   952                           
   953                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
   954     07A9  300A               	movlw	10
   955     07AA  00F8               	movwf	___lwmod@divisor
   956     07AB  3000               	movlw	0
   957     07AC  00F9               	movwf	___lwmod@divisor+1
   958     07AD  0828               	movf	sprintf@prec,w
   959     07AE  00A3               	movwf	??_sprintf
   960     07AF  0723               	addwf	??_sprintf,w
   961     07B0  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   962     07B1  0084               	movwf	4
   963     07B2  120A  118A  200D  120A  118A  	fcall	stringdir
   964     07B7  00F0               	movwf	___lwdiv@divisor
   965     07B8  120A  118A  200D  120A  118A  	fcall	stringdir
   966     07BD  00F1               	movwf	___lwdiv@divisor+1
   967     07BE  082A               	movf	sprintf@val+1,w
   968     07BF  00F3               	movwf	___lwdiv@dividend+1
   969     07C0  0829               	movf	sprintf@val,w
   970     07C1  00F2               	movwf	___lwdiv@dividend
   971     07C2  120A  118A  2602  120A  118A  	fcall	___lwdiv
   972     07C7  0871               	movf	?___lwdiv+1,w
   973     07C8  00FB               	movwf	___lwmod@dividend+1
   974     07C9  0870               	movf	?___lwdiv,w
   975     07CA  00FA               	movwf	___lwmod@dividend
   976     07CB  120A  118A  258D  120A  118A  	fcall	___lwmod
   977     07D0  0878               	movf	?___lwmod,w
   978     07D1  3E30               	addlw	48
   979     07D2  1283               	bcf	3,5	;RP0=0, select bank0
   980     07D3  1303               	bcf	3,6	;RP1=0, select bank0
   981     07D4  00AC               	movwf	sprintf@c
   982     07D5                     l1118:
   983                           
   984                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
   985     07D5  082B               	movf	sprintf@sp,w
   986     07D6  0084               	movwf	4
   987     07D7  082C               	movf	sprintf@c,w
   988     07D8  1383               	bcf	3,7	;select IRP bank0
   989     07D9  0080               	movwf	0
   990     07DA                     l1120:
   991     07DA  3001               	movlw	1
   992     07DB  00A3               	movwf	??_sprintf
   993     07DC  0823               	movf	??_sprintf,w
   994     07DD  07AB               	addwf	sprintf@sp,f
   995     07DE                     l1122:
   996                           
   997                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
   998     07DE  30FF               	movlw	255
   999     07DF  00A3               	movwf	??_sprintf
  1000     07E0  0823               	movf	??_sprintf,w
  1001     07E1  07A8               	addwf	sprintf@prec,f
  1002     07E2  0A28               	incf	sprintf@prec,w
  1003     07E3  1D03               	btfss	3,2
  1004     07E4  2FE6               	goto	u611
  1005     07E5  2FE7               	goto	u610
  1006     07E6                     u611:
  1007     07E6  2FA9               	goto	l1116
  1008     07E7                     u610:
  1009     07E7                     l1124:
  1010                           
  1011                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1012     07E7  3001               	movlw	1
  1013     07E8  07A0               	addwf	sprintf@f,f
  1014     07E9  30FF               	movlw	-1
  1015     07EA  0720               	addwf	sprintf@f,w
  1016     07EB  0084               	movwf	4
  1017     07EC  120A  118A  200D  120A  118A  	fcall	stringdir
  1018     07F1  00AC               	movwf	sprintf@c
  1019     07F2  082C               	movf	sprintf@c,w
  1020     07F3  1D03               	btfss	3,2
  1021     07F4  2FF6               	goto	u621
  1022     07F5  2FF7               	goto	u620
  1023     07F6                     u621:
  1024     07F6  2F28               	goto	l1074
  1025     07F7                     u620:
  1026     07F7                     l1126:
  1027                           
  1028                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1029     07F7  082B               	movf	sprintf@sp,w
  1030     07F8  0084               	movwf	4
  1031     07F9  1383               	bcf	3,7	;select IRP bank0
  1032     07FA  0180               	clrf	0
  1033     07FB                     l172:
  1034     07FB  0008               	return
  1035     07FC                     __end_of_sprintf:
  1036                           
  1037                           	psect	text2
  1038     058D                     __ptext2:	
  1039 ;; *************** function ___lwmod *****************
  1040 ;; Defined at:
  1041 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwmod.c"
  1042 ;; Parameters:    Size  Location     Type
  1043 ;;  divisor         2    8[COMMON] unsigned int 
  1044 ;;  dividend        2   10[COMMON] unsigned int 
  1045 ;; Auto vars:     Size  Location     Type
  1046 ;;  counter         1   13[COMMON] unsigned char 
  1047 ;; Return value:  Size  Location     Type
  1048 ;;                  2    8[COMMON] unsigned int 
  1049 ;; Registers used:
  1050 ;;		wreg, status,2, status,0
  1051 ;; Tracked objects:
  1052 ;;		On entry : 0/0
  1053 ;;		On exit  : 0/0
  1054 ;;		Unchanged: 0/0
  1055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1056 ;;      Params:         4       0       0       0       0
  1057 ;;      Locals:         1       0       0       0       0
  1058 ;;      Temps:          1       0       0       0       0
  1059 ;;      Totals:         6       0       0       0       0
  1060 ;;Total ram usage:        6 bytes
  1061 ;; Hardware stack levels used: 1
  1062 ;; This function calls:
  1063 ;;		Nothing
  1064 ;; This function is called by:
  1065 ;;		_sprintf
  1066 ;; This function uses a non-reentrant model
  1067 ;;
  1068                           
  1069     058D                     ___lwmod:	
  1070                           ;psect for function ___lwmod
  1071                           
  1072     058D                     l1032:	
  1073                           ;incstack = 0
  1074                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1075                           
  1076     058D  0878               	movf	___lwmod@divisor,w
  1077     058E  0479               	iorwf	___lwmod@divisor+1,w
  1078     058F  1903               	btfsc	3,2
  1079     0590  2D92               	goto	u481
  1080     0591  2D93               	goto	u480
  1081     0592                     u481:
  1082     0592  2DC2               	goto	l1050
  1083     0593                     u480:
  1084     0593                     l1034:
  1085     0593  01FD               	clrf	___lwmod@counter
  1086     0594  0AFD               	incf	___lwmod@counter,f
  1087     0595  2DA1               	goto	l1040
  1088     0596                     l1036:
  1089     0596  3001               	movlw	1
  1090     0597                     u495:
  1091     0597  1003               	clrc
  1092     0598  0DF8               	rlf	___lwmod@divisor,f
  1093     0599  0DF9               	rlf	___lwmod@divisor+1,f
  1094     059A  3EFF               	addlw	-1
  1095     059B  1D03               	skipz
  1096     059C  2D97               	goto	u495
  1097     059D                     l1038:
  1098     059D  3001               	movlw	1
  1099     059E  00FC               	movwf	??___lwmod
  1100     059F  087C               	movf	??___lwmod,w
  1101     05A0  07FD               	addwf	___lwmod@counter,f
  1102     05A1                     l1040:
  1103     05A1  1FF9               	btfss	___lwmod@divisor+1,7
  1104     05A2  2DA4               	goto	u501
  1105     05A3  2DA5               	goto	u500
  1106     05A4                     u501:
  1107     05A4  2D96               	goto	l1036
  1108     05A5                     u500:
  1109     05A5                     l1042:
  1110     05A5  0879               	movf	___lwmod@divisor+1,w
  1111     05A6  027B               	subwf	___lwmod@dividend+1,w
  1112     05A7  1D03               	skipz
  1113     05A8  2DAB               	goto	u515
  1114     05A9  0878               	movf	___lwmod@divisor,w
  1115     05AA  027A               	subwf	___lwmod@dividend,w
  1116     05AB                     u515:
  1117     05AB  1C03               	skipc
  1118     05AC  2DAE               	goto	u511
  1119     05AD  2DAF               	goto	u510
  1120     05AE                     u511:
  1121     05AE  2DB5               	goto	l1046
  1122     05AF                     u510:
  1123     05AF                     l1044:
  1124     05AF  0878               	movf	___lwmod@divisor,w
  1125     05B0  02FA               	subwf	___lwmod@dividend,f
  1126     05B1  0879               	movf	___lwmod@divisor+1,w
  1127     05B2  1C03               	skipc
  1128     05B3  03FB               	decf	___lwmod@dividend+1,f
  1129     05B4  02FB               	subwf	___lwmod@dividend+1,f
  1130     05B5                     l1046:
  1131     05B5  3001               	movlw	1
  1132     05B6                     u525:
  1133     05B6  1003               	clrc
  1134     05B7  0CF9               	rrf	___lwmod@divisor+1,f
  1135     05B8  0CF8               	rrf	___lwmod@divisor,f
  1136     05B9  3EFF               	addlw	-1
  1137     05BA  1D03               	skipz
  1138     05BB  2DB6               	goto	u525
  1139     05BC                     l1048:
  1140     05BC  3001               	movlw	1
  1141     05BD  02FD               	subwf	___lwmod@counter,f
  1142     05BE  1D03               	btfss	3,2
  1143     05BF  2DC1               	goto	u531
  1144     05C0  2DC2               	goto	u530
  1145     05C1                     u531:
  1146     05C1  2DA5               	goto	l1042
  1147     05C2                     u530:
  1148     05C2                     l1050:
  1149     05C2  087B               	movf	___lwmod@dividend+1,w
  1150     05C3  00F9               	movwf	?___lwmod+1
  1151     05C4  087A               	movf	___lwmod@dividend,w
  1152     05C5  00F8               	movwf	?___lwmod
  1153     05C6                     l458:
  1154     05C6  0008               	return
  1155     05C7                     __end_of___lwmod:
  1156                           
  1157                           	psect	text3
  1158     0602                     __ptext3:	
  1159 ;; *************** function ___lwdiv *****************
  1160 ;; Defined at:
  1161 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwdiv.c"
  1162 ;; Parameters:    Size  Location     Type
  1163 ;;  divisor         2    0[COMMON] unsigned int 
  1164 ;;  dividend        2    2[COMMON] unsigned int 
  1165 ;; Auto vars:     Size  Location     Type
  1166 ;;  quotient        2    5[COMMON] unsigned int 
  1167 ;;  counter         1    7[COMMON] unsigned char 
  1168 ;; Return value:  Size  Location     Type
  1169 ;;                  2    0[COMMON] unsigned int 
  1170 ;; Registers used:
  1171 ;;		wreg, status,2, status,0
  1172 ;; Tracked objects:
  1173 ;;		On entry : 0/0
  1174 ;;		On exit  : 0/0
  1175 ;;		Unchanged: 0/0
  1176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1177 ;;      Params:         4       0       0       0       0
  1178 ;;      Locals:         3       0       0       0       0
  1179 ;;      Temps:          1       0       0       0       0
  1180 ;;      Totals:         8       0       0       0       0
  1181 ;;Total ram usage:        8 bytes
  1182 ;; Hardware stack levels used: 1
  1183 ;; This function calls:
  1184 ;;		Nothing
  1185 ;; This function is called by:
  1186 ;;		_sprintf
  1187 ;; This function uses a non-reentrant model
  1188 ;;
  1189                           
  1190     0602                     ___lwdiv:	
  1191                           ;psect for function ___lwdiv
  1192                           
  1193     0602                     l1006:	
  1194                           ;incstack = 0
  1195                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1196                           
  1197     0602  01F5               	clrf	___lwdiv@quotient
  1198     0603  01F6               	clrf	___lwdiv@quotient+1
  1199     0604                     l1008:
  1200     0604  0870               	movf	___lwdiv@divisor,w
  1201     0605  0471               	iorwf	___lwdiv@divisor+1,w
  1202     0606  1903               	btfsc	3,2
  1203     0607  2E09               	goto	u411
  1204     0608  2E0A               	goto	u410
  1205     0609                     u411:
  1206     0609  2E41               	goto	l1028
  1207     060A                     u410:
  1208     060A                     l1010:
  1209     060A  01F7               	clrf	___lwdiv@counter
  1210     060B  0AF7               	incf	___lwdiv@counter,f
  1211     060C  2E18               	goto	l1016
  1212     060D                     l1012:
  1213     060D  3001               	movlw	1
  1214     060E                     u425:
  1215     060E  1003               	clrc
  1216     060F  0DF0               	rlf	___lwdiv@divisor,f
  1217     0610  0DF1               	rlf	___lwdiv@divisor+1,f
  1218     0611  3EFF               	addlw	-1
  1219     0612  1D03               	skipz
  1220     0613  2E0E               	goto	u425
  1221     0614                     l1014:
  1222     0614  3001               	movlw	1
  1223     0615  00F4               	movwf	??___lwdiv
  1224     0616  0874               	movf	??___lwdiv,w
  1225     0617  07F7               	addwf	___lwdiv@counter,f
  1226     0618                     l1016:
  1227     0618  1FF1               	btfss	___lwdiv@divisor+1,7
  1228     0619  2E1B               	goto	u431
  1229     061A  2E1C               	goto	u430
  1230     061B                     u431:
  1231     061B  2E0D               	goto	l1012
  1232     061C                     u430:
  1233     061C                     l1018:
  1234     061C  3001               	movlw	1
  1235     061D                     u445:
  1236     061D  1003               	clrc
  1237     061E  0DF5               	rlf	___lwdiv@quotient,f
  1238     061F  0DF6               	rlf	___lwdiv@quotient+1,f
  1239     0620  3EFF               	addlw	-1
  1240     0621  1D03               	skipz
  1241     0622  2E1D               	goto	u445
  1242     0623  0871               	movf	___lwdiv@divisor+1,w
  1243     0624  0273               	subwf	___lwdiv@dividend+1,w
  1244     0625  1D03               	skipz
  1245     0626  2E29               	goto	u455
  1246     0627  0870               	movf	___lwdiv@divisor,w
  1247     0628  0272               	subwf	___lwdiv@dividend,w
  1248     0629                     u455:
  1249     0629  1C03               	skipc
  1250     062A  2E2C               	goto	u451
  1251     062B  2E2D               	goto	u450
  1252     062C                     u451:
  1253     062C  2E34               	goto	l1024
  1254     062D                     u450:
  1255     062D                     l1020:
  1256     062D  0870               	movf	___lwdiv@divisor,w
  1257     062E  02F2               	subwf	___lwdiv@dividend,f
  1258     062F  0871               	movf	___lwdiv@divisor+1,w
  1259     0630  1C03               	skipc
  1260     0631  03F3               	decf	___lwdiv@dividend+1,f
  1261     0632  02F3               	subwf	___lwdiv@dividend+1,f
  1262     0633                     l1022:
  1263     0633  1475               	bsf	___lwdiv@quotient,0
  1264     0634                     l1024:
  1265     0634  3001               	movlw	1
  1266     0635                     u465:
  1267     0635  1003               	clrc
  1268     0636  0CF1               	rrf	___lwdiv@divisor+1,f
  1269     0637  0CF0               	rrf	___lwdiv@divisor,f
  1270     0638  3EFF               	addlw	-1
  1271     0639  1D03               	skipz
  1272     063A  2E35               	goto	u465
  1273     063B                     l1026:
  1274     063B  3001               	movlw	1
  1275     063C  02F7               	subwf	___lwdiv@counter,f
  1276     063D  1D03               	btfss	3,2
  1277     063E  2E40               	goto	u471
  1278     063F  2E41               	goto	u470
  1279     0640                     u471:
  1280     0640  2E1C               	goto	l1018
  1281     0641                     u470:
  1282     0641                     l1028:
  1283     0641  0876               	movf	___lwdiv@quotient+1,w
  1284     0642  00F1               	movwf	?___lwdiv+1
  1285     0643  0875               	movf	___lwdiv@quotient,w
  1286     0644  00F0               	movwf	?___lwdiv
  1287     0645                     l448:
  1288     0645  0008               	return
  1289     0646                     __end_of___lwdiv:
  1290                           
  1291                           	psect	text4
  1292     0532                     __ptext4:	
  1293 ;; *************** function _lcd_str *****************
  1294 ;; Defined at:
  1295 ;;		line 35 in file "lcd.c"
  1296 ;; Parameters:    Size  Location     Type
  1297 ;;  ptr             2    2[COMMON] PTR unsigned char 
  1298 ;;		 -> main@arr(15), STR_1(18), 
  1299 ;; Auto vars:     Size  Location     Type
  1300 ;;		None
  1301 ;; Return value:  Size  Location     Type
  1302 ;;                  1    wreg      void 
  1303 ;; Registers used:
  1304 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1305 ;; Tracked objects:
  1306 ;;		On entry : 0/0
  1307 ;;		On exit  : 0/0
  1308 ;;		Unchanged: 0/0
  1309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1310 ;;      Params:         2       0       0       0       0
  1311 ;;      Locals:         0       0       0       0       0
  1312 ;;      Temps:          0       0       0       0       0
  1313 ;;      Totals:         2       0       0       0       0
  1314 ;;Total ram usage:        2 bytes
  1315 ;; Hardware stack levels used: 1
  1316 ;; Hardware stack levels required when called: 1
  1317 ;; This function calls:
  1318 ;;		_lcd_data
  1319 ;; This function is called by:
  1320 ;;		_main
  1321 ;; This function uses a non-reentrant model
  1322 ;;
  1323                           
  1324     0532                     _lcd_str:	
  1325                           ;psect for function _lcd_str
  1326                           
  1327     0532                     l1064:	
  1328                           ;incstack = 0
  1329                           ; Regs used in _lcd_str: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1330                           
  1331                           
  1332                           ;lcd.c: 36:    while(*ptr){
  1333     0532  2D47               	goto	l1070
  1334     0533                     l1066:
  1335                           
  1336                           ;lcd.c: 37:         lcd_data(*ptr++);
  1337     0533  0873               	movf	lcd_str@ptr+1,w
  1338     0534  00FF               	movwf	btemp+1
  1339     0535  0872               	movf	lcd_str@ptr,w
  1340     0536  0084               	movwf	4
  1341     0537  120A  118A  2003  120A  118A  	fcall	stringtab
  1342     053C  120A  118A  2558  120A  118A  	fcall	_lcd_data
  1343     0541                     l1068:
  1344     0541  3001               	movlw	1
  1345     0542  07F2               	addwf	lcd_str@ptr,f
  1346     0543  1803               	skipnc
  1347     0544  0AF3               	incf	lcd_str@ptr+1,f
  1348     0545  3000               	movlw	0
  1349     0546  07F3               	addwf	lcd_str@ptr+1,f
  1350     0547                     l1070:
  1351                           
  1352                           ;lcd.c: 36:    while(*ptr){
  1353     0547  0873               	movf	lcd_str@ptr+1,w
  1354     0548  1283               	bcf	3,5	;RP0=0, select bank0
  1355     0549  1303               	bcf	3,6	;RP1=0, select bank0
  1356     054A  00FF               	movwf	btemp+1
  1357     054B  0872               	movf	lcd_str@ptr,w
  1358     054C  0084               	movwf	4
  1359     054D  120A  118A  2003  120A  118A  	fcall	stringtab
  1360     0552  3A00               	xorlw	0
  1361     0553  1D03               	skipz
  1362     0554  2D56               	goto	u551
  1363     0555  2D57               	goto	u550
  1364     0556                     u551:
  1365     0556  2D33               	goto	l1066
  1366     0557                     u550:
  1367     0557                     l59:
  1368     0557  0008               	return
  1369     0558                     __end_of_lcd_str:
  1370                           
  1371                           	psect	text5
  1372     0558                     __ptext5:	
  1373 ;; *************** function _lcd_data *****************
  1374 ;; Defined at:
  1375 ;;		line 20 in file "lcd.c"
  1376 ;; Parameters:    Size  Location     Type
  1377 ;;  data            1    wreg     unsigned char 
  1378 ;; Auto vars:     Size  Location     Type
  1379 ;;  data            1    1[COMMON] unsigned char 
  1380 ;; Return value:  Size  Location     Type
  1381 ;;                  1    wreg      void 
  1382 ;; Registers used:
  1383 ;;		wreg, status,2, status,0
  1384 ;; Tracked objects:
  1385 ;;		On entry : 0/0
  1386 ;;		On exit  : 0/0
  1387 ;;		Unchanged: 0/0
  1388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1389 ;;      Params:         0       0       0       0       0
  1390 ;;      Locals:         1       0       0       0       0
  1391 ;;      Temps:          1       0       0       0       0
  1392 ;;      Totals:         2       0       0       0       0
  1393 ;;Total ram usage:        2 bytes
  1394 ;; Hardware stack levels used: 1
  1395 ;; This function calls:
  1396 ;;		Nothing
  1397 ;; This function is called by:
  1398 ;;		_lcd_str
  1399 ;; This function uses a non-reentrant model
  1400 ;;
  1401                           
  1402     0558                     _lcd_data:	
  1403                           ;psect for function _lcd_data
  1404                           
  1405                           
  1406                           ;incstack = 0
  1407                           ; Regs used in _lcd_data: [wreg+status,2+status,0]
  1408                           ;lcd_data@data stored from wreg
  1409     0558  00F1               	movwf	lcd_data@data
  1410     0559                     l982:
  1411                           
  1412                           ;lcd.c: 21:     PORTD = data & 0xf0;
  1413     0559  0871               	movf	lcd_data@data,w
  1414     055A  39F0               	andlw	240
  1415     055B  1283               	bcf	3,5	;RP0=0, select bank0
  1416     055C  1303               	bcf	3,6	;RP1=0, select bank0
  1417     055D  0088               	movwf	8	;volatile
  1418     055E                     l984:
  1419                           
  1420                           ;lcd.c: 22:     PORTC |= 0x01;
  1421     055E  1407               	bsf	7,0	;volatile
  1422     055F                     l986:
  1423                           
  1424                           ;lcd.c: 23:     PORTC &= ~0x02;
  1425     055F  30FD               	movlw	253
  1426     0560  00F0               	movwf	??_lcd_data
  1427     0561  0870               	movf	??_lcd_data,w
  1428     0562  0587               	andwf	7,f	;volatile
  1429     0563                     l988:
  1430                           
  1431                           ;lcd.c: 24:     PORTC |= 0x04;
  1432     0563  1507               	bsf	7,2	;volatile
  1433     0564                     l990:
  1434                           
  1435                           ;lcd.c: 25:     _delay((unsigned long)((3)*(1000000/4000.0)));
  1436     0564  30F9               	movlw	249
  1437     0565  00F0               	movwf	??_lcd_data
  1438     0566                     u787:
  1439     0566  0BF0               	decfsz	??_lcd_data,f
  1440     0567  2D66               	goto	u787
  1441     0568  2D69               	nop2
  1442     0569                     l992:
  1443                           
  1444                           ;lcd.c: 26:     PORTC &= ~0x04;
  1445     0569  30FB               	movlw	251
  1446     056A  00F0               	movwf	??_lcd_data
  1447     056B  0870               	movf	??_lcd_data,w
  1448     056C  1283               	bcf	3,5	;RP0=0, select bank0
  1449     056D  1303               	bcf	3,6	;RP1=0, select bank0
  1450     056E  0587               	andwf	7,f	;volatile
  1451     056F                     l994:
  1452                           
  1453                           ;lcd.c: 28:     PORTD = (data<<4) & 0xf0;
  1454     056F  0871               	movf	lcd_data@data,w
  1455     0570  00F0               	movwf	??_lcd_data
  1456     0571  3003               	movlw	3
  1457     0572                     u405:
  1458     0572  1003               	clrc
  1459     0573  0DF0               	rlf	??_lcd_data,f
  1460     0574  3EFF               	addlw	-1
  1461     0575  1D03               	skipz
  1462     0576  2D72               	goto	u405
  1463     0577  1003               	clrc
  1464     0578  0D70               	rlf	??_lcd_data,w
  1465     0579  39F0               	andlw	240
  1466     057A  0088               	movwf	8	;volatile
  1467     057B                     l996:
  1468                           
  1469                           ;lcd.c: 29:     PORTC |= 0x01;
  1470     057B  1407               	bsf	7,0	;volatile
  1471     057C                     l998:
  1472                           
  1473                           ;lcd.c: 30:     PORTC &= ~0x02;
  1474     057C  30FD               	movlw	253
  1475     057D  00F0               	movwf	??_lcd_data
  1476     057E  0870               	movf	??_lcd_data,w
  1477     057F  0587               	andwf	7,f	;volatile
  1478     0580                     l1000:
  1479                           
  1480                           ;lcd.c: 31:     PORTC |= 0x04;
  1481     0580  1507               	bsf	7,2	;volatile
  1482     0581                     l1002:
  1483                           
  1484                           ;lcd.c: 32:     _delay((unsigned long)((3)*(1000000/4000.0)));
  1485     0581  30F9               	movlw	249
  1486     0582  00F0               	movwf	??_lcd_data
  1487     0583                     u797:
  1488     0583  0BF0               	decfsz	??_lcd_data,f
  1489     0584  2D83               	goto	u797
  1490     0585  2D86               	nop2
  1491     0586                     l1004:
  1492                           
  1493                           ;lcd.c: 33:     PORTC &= ~0x04;
  1494     0586  30FB               	movlw	251
  1495     0587  00F0               	movwf	??_lcd_data
  1496     0588  0870               	movf	??_lcd_data,w
  1497     0589  1283               	bcf	3,5	;RP0=0, select bank0
  1498     058A  1303               	bcf	3,6	;RP1=0, select bank0
  1499     058B  0587               	andwf	7,f	;volatile
  1500     058C                     l53:
  1501     058C  0008               	return
  1502     058D                     __end_of_lcd_data:
  1503                           
  1504                           	psect	text6
  1505     04EE                     __ptext6:	
  1506 ;; *************** function _lcd_init *****************
  1507 ;; Defined at:
  1508 ;;		line 40 in file "lcd.c"
  1509 ;; Parameters:    Size  Location     Type
  1510 ;;		None
  1511 ;; Auto vars:     Size  Location     Type
  1512 ;;		None
  1513 ;; Return value:  Size  Location     Type
  1514 ;;                  1    wreg      void 
  1515 ;; Registers used:
  1516 ;;		wreg, status,2, status,0, pclath, cstack
  1517 ;; Tracked objects:
  1518 ;;		On entry : 0/0
  1519 ;;		On exit  : 0/0
  1520 ;;		Unchanged: 0/0
  1521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1522 ;;      Params:         0       0       0       0       0
  1523 ;;      Locals:         0       0       0       0       0
  1524 ;;      Temps:          0       0       0       0       0
  1525 ;;      Totals:         0       0       0       0       0
  1526 ;;Total ram usage:        0 bytes
  1527 ;; Hardware stack levels used: 1
  1528 ;; Hardware stack levels required when called: 1
  1529 ;; This function calls:
  1530 ;;		_lcd_cmd
  1531 ;; This function is called by:
  1532 ;;		_main
  1533 ;; This function uses a non-reentrant model
  1534 ;;
  1535                           
  1536     04EE                     _lcd_init:	
  1537                           ;psect for function _lcd_init
  1538                           
  1539     04EE                     l1062:	
  1540                           ;incstack = 0
  1541                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  1542                           
  1543                           
  1544                           ;lcd.c: 42:     lcd_cmd(0x01);
  1545     04EE  3001               	movlw	1
  1546     04EF  120A  118A  25C7  120A  118A  	fcall	_lcd_cmd
  1547                           
  1548                           ;lcd.c: 43:     lcd_cmd(0x02);
  1549     04F4  3002               	movlw	2
  1550     04F5  120A  118A  25C7  120A  118A  	fcall	_lcd_cmd
  1551                           
  1552                           ;lcd.c: 44:     lcd_cmd(0x06);
  1553     04FA  3006               	movlw	6
  1554     04FB  120A  118A  25C7  120A  118A  	fcall	_lcd_cmd
  1555                           
  1556                           ;lcd.c: 45:     lcd_cmd(0x28);
  1557     0500  3028               	movlw	40
  1558     0501  120A  118A  25C7  120A  118A  	fcall	_lcd_cmd
  1559                           
  1560                           ;lcd.c: 46:     lcd_cmd(0x0c);
  1561     0506  300C               	movlw	12
  1562     0507  120A  118A  25C7  120A  118A  	fcall	_lcd_cmd
  1563     050C                     l62:
  1564     050C  0008               	return
  1565     050D                     __end_of_lcd_init:
  1566                           
  1567                           	psect	text7
  1568     05C7                     __ptext7:	
  1569 ;; *************** function _lcd_cmd *****************
  1570 ;; Defined at:
  1571 ;;		line 4 in file "lcd.c"
  1572 ;; Parameters:    Size  Location     Type
  1573 ;;  cmd             1    wreg     unsigned char 
  1574 ;; Auto vars:     Size  Location     Type
  1575 ;;  cmd             1    1[COMMON] unsigned char 
  1576 ;; Return value:  Size  Location     Type
  1577 ;;                  1    wreg      void 
  1578 ;; Registers used:
  1579 ;;		wreg, status,2, status,0
  1580 ;; Tracked objects:
  1581 ;;		On entry : 0/0
  1582 ;;		On exit  : 0/0
  1583 ;;		Unchanged: 0/0
  1584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1585 ;;      Params:         0       0       0       0       0
  1586 ;;      Locals:         1       0       0       0       0
  1587 ;;      Temps:          1       0       0       0       0
  1588 ;;      Totals:         2       0       0       0       0
  1589 ;;Total ram usage:        2 bytes
  1590 ;; Hardware stack levels used: 1
  1591 ;; This function calls:
  1592 ;;		Nothing
  1593 ;; This function is called by:
  1594 ;;		_main
  1595 ;;		_lcd_init
  1596 ;; This function uses a non-reentrant model
  1597 ;;
  1598                           
  1599     05C7                     _lcd_cmd:	
  1600                           ;psect for function _lcd_cmd
  1601                           
  1602                           
  1603                           ;incstack = 0
  1604                           ; Regs used in _lcd_cmd: [wreg+status,2+status,0]
  1605                           ;lcd_cmd@cmd stored from wreg
  1606     05C7  00F1               	movwf	lcd_cmd@cmd
  1607     05C8                     l958:
  1608                           
  1609                           ;lcd.c: 5:     PORTD = cmd & 0xf0;
  1610     05C8  0871               	movf	lcd_cmd@cmd,w
  1611     05C9  39F0               	andlw	240
  1612     05CA  1283               	bcf	3,5	;RP0=0, select bank0
  1613     05CB  1303               	bcf	3,6	;RP1=0, select bank0
  1614     05CC  0088               	movwf	8	;volatile
  1615     05CD                     l960:
  1616                           
  1617                           ;lcd.c: 6:     PORTC &= ~0x01;
  1618     05CD  30FE               	movlw	254
  1619     05CE  00F0               	movwf	??_lcd_cmd
  1620     05CF  0870               	movf	??_lcd_cmd,w
  1621     05D0  0587               	andwf	7,f	;volatile
  1622     05D1                     l962:
  1623                           
  1624                           ;lcd.c: 7:     PORTC &= ~0x02;
  1625     05D1  30FD               	movlw	253
  1626     05D2  00F0               	movwf	??_lcd_cmd
  1627     05D3  0870               	movf	??_lcd_cmd,w
  1628     05D4  0587               	andwf	7,f	;volatile
  1629     05D5                     l964:
  1630                           
  1631                           ;lcd.c: 8:     PORTC |= 0x04;
  1632     05D5  1507               	bsf	7,2	;volatile
  1633     05D6                     l966:
  1634                           
  1635                           ;lcd.c: 9:     _delay((unsigned long)((3)*(1000000/4000.0)));
  1636     05D6  30F9               	movlw	249
  1637     05D7  00F0               	movwf	??_lcd_cmd
  1638     05D8                     u807:
  1639     05D8  0BF0               	decfsz	??_lcd_cmd,f
  1640     05D9  2DD8               	goto	u807
  1641     05DA  2DDB               	nop2
  1642     05DB                     l968:
  1643                           
  1644                           ;lcd.c: 10:     PORTC &= ~0x04;
  1645     05DB  30FB               	movlw	251
  1646     05DC  00F0               	movwf	??_lcd_cmd
  1647     05DD  0870               	movf	??_lcd_cmd,w
  1648     05DE  1283               	bcf	3,5	;RP0=0, select bank0
  1649     05DF  1303               	bcf	3,6	;RP1=0, select bank0
  1650     05E0  0587               	andwf	7,f	;volatile
  1651     05E1                     l970:
  1652                           
  1653                           ;lcd.c: 12:     PORTD = (cmd<<4) & 0xf0;
  1654     05E1  0871               	movf	lcd_cmd@cmd,w
  1655     05E2  00F0               	movwf	??_lcd_cmd
  1656     05E3  3003               	movlw	3
  1657     05E4                     u395:
  1658     05E4  1003               	clrc
  1659     05E5  0DF0               	rlf	??_lcd_cmd,f
  1660     05E6  3EFF               	addlw	-1
  1661     05E7  1D03               	skipz
  1662     05E8  2DE4               	goto	u395
  1663     05E9  1003               	clrc
  1664     05EA  0D70               	rlf	??_lcd_cmd,w
  1665     05EB  39F0               	andlw	240
  1666     05EC  0088               	movwf	8	;volatile
  1667     05ED                     l972:
  1668                           
  1669                           ;lcd.c: 13:     PORTC &= ~0x01;
  1670     05ED  30FE               	movlw	254
  1671     05EE  00F0               	movwf	??_lcd_cmd
  1672     05EF  0870               	movf	??_lcd_cmd,w
  1673     05F0  0587               	andwf	7,f	;volatile
  1674     05F1                     l974:
  1675                           
  1676                           ;lcd.c: 14:     PORTC &= ~0x02;
  1677     05F1  30FD               	movlw	253
  1678     05F2  00F0               	movwf	??_lcd_cmd
  1679     05F3  0870               	movf	??_lcd_cmd,w
  1680     05F4  0587               	andwf	7,f	;volatile
  1681     05F5                     l976:
  1682                           
  1683                           ;lcd.c: 15:     PORTC |= 0x04;
  1684     05F5  1507               	bsf	7,2	;volatile
  1685     05F6                     l978:
  1686                           
  1687                           ;lcd.c: 16:     _delay((unsigned long)((3)*(1000000/4000.0)));
  1688     05F6  30F9               	movlw	249
  1689     05F7  00F0               	movwf	??_lcd_cmd
  1690     05F8                     u817:
  1691     05F8  0BF0               	decfsz	??_lcd_cmd,f
  1692     05F9  2DF8               	goto	u817
  1693     05FA  2DFB               	nop2
  1694     05FB                     l980:
  1695                           
  1696                           ;lcd.c: 17:     PORTC &= ~0x04;
  1697     05FB  30FB               	movlw	251
  1698     05FC  00F0               	movwf	??_lcd_cmd
  1699     05FD  0870               	movf	??_lcd_cmd,w
  1700     05FE  1283               	bcf	3,5	;RP0=0, select bank0
  1701     05FF  1303               	bcf	3,6	;RP1=0, select bank0
  1702     0600  0587               	andwf	7,f	;volatile
  1703     0601                     l50:
  1704     0601  0008               	return
  1705     0602                     __end_of_lcd_cmd:
  1706                           
  1707                           	psect	text8
  1708     050D                     __ptext8:	
  1709 ;; *************** function ___wmul *****************
  1710 ;; Defined at:
  1711 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul16.c"
  1712 ;; Parameters:    Size  Location     Type
  1713 ;;  multiplier      2    0[COMMON] unsigned int 
  1714 ;;  multiplicand    2    2[COMMON] unsigned int 
  1715 ;; Auto vars:     Size  Location     Type
  1716 ;;  product         2    4[COMMON] unsigned int 
  1717 ;; Return value:  Size  Location     Type
  1718 ;;                  2    0[COMMON] unsigned int 
  1719 ;; Registers used:
  1720 ;;		wreg, status,2, status,0
  1721 ;; Tracked objects:
  1722 ;;		On entry : 0/0
  1723 ;;		On exit  : 0/0
  1724 ;;		Unchanged: 0/0
  1725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1726 ;;      Params:         4       0       0       0       0
  1727 ;;      Locals:         2       0       0       0       0
  1728 ;;      Temps:          0       0       0       0       0
  1729 ;;      Totals:         6       0       0       0       0
  1730 ;;Total ram usage:        6 bytes
  1731 ;; Hardware stack levels used: 1
  1732 ;; This function calls:
  1733 ;;		Nothing
  1734 ;; This function is called by:
  1735 ;;		_main
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739     050D                     ___wmul:	
  1740                           ;psect for function ___wmul
  1741                           
  1742     050D                     l1134:	
  1743                           ;incstack = 0
  1744                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1745                           
  1746     050D  01F4               	clrf	___wmul@product
  1747     050E  01F5               	clrf	___wmul@product+1
  1748     050F                     l1136:
  1749     050F  1C70               	btfss	___wmul@multiplier,0
  1750     0510  2D12               	goto	u631
  1751     0511  2D13               	goto	u630
  1752     0512                     u631:
  1753     0512  2D19               	goto	l176
  1754     0513                     u630:
  1755     0513                     l1138:
  1756     0513  0872               	movf	___wmul@multiplicand,w
  1757     0514  07F4               	addwf	___wmul@product,f
  1758     0515  1803               	skipnc
  1759     0516  0AF5               	incf	___wmul@product+1,f
  1760     0517  0873               	movf	___wmul@multiplicand+1,w
  1761     0518  07F5               	addwf	___wmul@product+1,f
  1762     0519                     l176:
  1763     0519  3001               	movlw	1
  1764     051A                     u645:
  1765     051A  1003               	clrc
  1766     051B  0DF2               	rlf	___wmul@multiplicand,f
  1767     051C  0DF3               	rlf	___wmul@multiplicand+1,f
  1768     051D  3EFF               	addlw	-1
  1769     051E  1D03               	skipz
  1770     051F  2D1A               	goto	u645
  1771     0520                     l1140:
  1772     0520  3001               	movlw	1
  1773     0521                     u655:
  1774     0521  1003               	clrc
  1775     0522  0CF1               	rrf	___wmul@multiplier+1,f
  1776     0523  0CF0               	rrf	___wmul@multiplier,f
  1777     0524  3EFF               	addlw	-1
  1778     0525  1D03               	skipz
  1779     0526  2D21               	goto	u655
  1780     0527                     l1142:
  1781     0527  0870               	movf	___wmul@multiplier,w
  1782     0528  0471               	iorwf	___wmul@multiplier+1,w
  1783     0529  1D03               	btfss	3,2
  1784     052A  2D2C               	goto	u661
  1785     052B  2D2D               	goto	u660
  1786     052C                     u661:
  1787     052C  2D0F               	goto	l1136
  1788     052D                     u660:
  1789     052D                     l1144:
  1790     052D  0875               	movf	___wmul@product+1,w
  1791     052E  00F1               	movwf	?___wmul+1
  1792     052F  0874               	movf	___wmul@product,w
  1793     0530  00F0               	movwf	?___wmul
  1794     0531                     l178:
  1795     0531  0008               	return
  1796     0532                     __end_of___wmul:
  1797                           
  1798                           	psect	text9
  1799     0646                     __ptext9:	
  1800 ;; *************** function ___awdiv *****************
  1801 ;; Defined at:
  1802 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awdiv.c"
  1803 ;; Parameters:    Size  Location     Type
  1804 ;;  divisor         2    6[COMMON] int 
  1805 ;;  dividend        2    8[COMMON] int 
  1806 ;; Auto vars:     Size  Location     Type
  1807 ;;  quotient        2    2[BANK0 ] int 
  1808 ;;  sign            1    1[BANK0 ] unsigned char 
  1809 ;;  counter         1    0[BANK0 ] unsigned char 
  1810 ;; Return value:  Size  Location     Type
  1811 ;;                  2    6[COMMON] int 
  1812 ;; Registers used:
  1813 ;;		wreg, status,2, status,0
  1814 ;; Tracked objects:
  1815 ;;		On entry : 0/0
  1816 ;;		On exit  : 0/0
  1817 ;;		Unchanged: 0/0
  1818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1819 ;;      Params:         4       0       0       0       0
  1820 ;;      Locals:         0       4       0       0       0
  1821 ;;      Temps:          1       0       0       0       0
  1822 ;;      Totals:         5       4       0       0       0
  1823 ;;Total ram usage:        9 bytes
  1824 ;; Hardware stack levels used: 1
  1825 ;; This function calls:
  1826 ;;		Nothing
  1827 ;; This function is called by:
  1828 ;;		_main
  1829 ;; This function uses a non-reentrant model
  1830 ;;
  1831                           
  1832     0646                     ___awdiv:	
  1833                           ;psect for function ___awdiv
  1834                           
  1835     0646                     l1148:	
  1836                           ;incstack = 0
  1837                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1838                           
  1839     0646  1283               	bcf	3,5	;RP0=0, select bank0
  1840     0647  1303               	bcf	3,6	;RP1=0, select bank0
  1841     0648  01A1               	clrf	___awdiv@sign
  1842     0649                     l1150:
  1843     0649  1FF7               	btfss	___awdiv@divisor+1,7
  1844     064A  2E4C               	goto	u671
  1845     064B  2E4D               	goto	u670
  1846     064C                     u671:
  1847     064C  2E54               	goto	l1156
  1848     064D                     u670:
  1849     064D                     l1152:
  1850     064D  09F6               	comf	___awdiv@divisor,f
  1851     064E  09F7               	comf	___awdiv@divisor+1,f
  1852     064F  0AF6               	incf	___awdiv@divisor,f
  1853     0650  1903               	skipnz
  1854     0651  0AF7               	incf	___awdiv@divisor+1,f
  1855     0652                     l1154:
  1856     0652  01A1               	clrf	___awdiv@sign
  1857     0653  0AA1               	incf	___awdiv@sign,f
  1858     0654                     l1156:
  1859     0654  1FF9               	btfss	___awdiv@dividend+1,7
  1860     0655  2E57               	goto	u681
  1861     0656  2E58               	goto	u680
  1862     0657                     u681:
  1863     0657  2E61               	goto	l1162
  1864     0658                     u680:
  1865     0658                     l1158:
  1866     0658  09F8               	comf	___awdiv@dividend,f
  1867     0659  09F9               	comf	___awdiv@dividend+1,f
  1868     065A  0AF8               	incf	___awdiv@dividend,f
  1869     065B  1903               	skipnz
  1870     065C  0AF9               	incf	___awdiv@dividend+1,f
  1871     065D                     l1160:
  1872     065D  3001               	movlw	1
  1873     065E  00FA               	movwf	??___awdiv
  1874     065F  087A               	movf	??___awdiv,w
  1875     0660  06A1               	xorwf	___awdiv@sign,f
  1876     0661                     l1162:
  1877     0661  01A2               	clrf	___awdiv@quotient
  1878     0662  01A3               	clrf	___awdiv@quotient+1
  1879     0663                     l1164:
  1880     0663  0876               	movf	___awdiv@divisor,w
  1881     0664  0477               	iorwf	___awdiv@divisor+1,w
  1882     0665  1903               	btfsc	3,2
  1883     0666  2E68               	goto	u691
  1884     0667  2E69               	goto	u690
  1885     0668                     u691:
  1886     0668  2EA0               	goto	l1184
  1887     0669                     u690:
  1888     0669                     l1166:
  1889     0669  01A0               	clrf	___awdiv@counter
  1890     066A  0AA0               	incf	___awdiv@counter,f
  1891     066B  2E77               	goto	l1172
  1892     066C                     l1168:
  1893     066C  3001               	movlw	1
  1894     066D                     u705:
  1895     066D  1003               	clrc
  1896     066E  0DF6               	rlf	___awdiv@divisor,f
  1897     066F  0DF7               	rlf	___awdiv@divisor+1,f
  1898     0670  3EFF               	addlw	-1
  1899     0671  1D03               	skipz
  1900     0672  2E6D               	goto	u705
  1901     0673                     l1170:
  1902     0673  3001               	movlw	1
  1903     0674  00FA               	movwf	??___awdiv
  1904     0675  087A               	movf	??___awdiv,w
  1905     0676  07A0               	addwf	___awdiv@counter,f
  1906     0677                     l1172:
  1907     0677  1FF7               	btfss	___awdiv@divisor+1,7
  1908     0678  2E7A               	goto	u711
  1909     0679  2E7B               	goto	u710
  1910     067A                     u711:
  1911     067A  2E6C               	goto	l1168
  1912     067B                     u710:
  1913     067B                     l1174:
  1914     067B  3001               	movlw	1
  1915     067C                     u725:
  1916     067C  1003               	clrc
  1917     067D  0DA2               	rlf	___awdiv@quotient,f
  1918     067E  0DA3               	rlf	___awdiv@quotient+1,f
  1919     067F  3EFF               	addlw	-1
  1920     0680  1D03               	skipz
  1921     0681  2E7C               	goto	u725
  1922     0682  0877               	movf	___awdiv@divisor+1,w
  1923     0683  0279               	subwf	___awdiv@dividend+1,w
  1924     0684  1D03               	skipz
  1925     0685  2E88               	goto	u735
  1926     0686  0876               	movf	___awdiv@divisor,w
  1927     0687  0278               	subwf	___awdiv@dividend,w
  1928     0688                     u735:
  1929     0688  1C03               	skipc
  1930     0689  2E8B               	goto	u731
  1931     068A  2E8C               	goto	u730
  1932     068B                     u731:
  1933     068B  2E93               	goto	l1180
  1934     068C                     u730:
  1935     068C                     l1176:
  1936     068C  0876               	movf	___awdiv@divisor,w
  1937     068D  02F8               	subwf	___awdiv@dividend,f
  1938     068E  0877               	movf	___awdiv@divisor+1,w
  1939     068F  1C03               	skipc
  1940     0690  03F9               	decf	___awdiv@dividend+1,f
  1941     0691  02F9               	subwf	___awdiv@dividend+1,f
  1942     0692                     l1178:
  1943     0692  1422               	bsf	___awdiv@quotient,0
  1944     0693                     l1180:
  1945     0693  3001               	movlw	1
  1946     0694                     u745:
  1947     0694  1003               	clrc
  1948     0695  0CF7               	rrf	___awdiv@divisor+1,f
  1949     0696  0CF6               	rrf	___awdiv@divisor,f
  1950     0697  3EFF               	addlw	-1
  1951     0698  1D03               	skipz
  1952     0699  2E94               	goto	u745
  1953     069A                     l1182:
  1954     069A  3001               	movlw	1
  1955     069B  02A0               	subwf	___awdiv@counter,f
  1956     069C  1D03               	btfss	3,2
  1957     069D  2E9F               	goto	u751
  1958     069E  2EA0               	goto	u750
  1959     069F                     u751:
  1960     069F  2E7B               	goto	l1174
  1961     06A0                     u750:
  1962     06A0                     l1184:
  1963     06A0  0821               	movf	___awdiv@sign,w
  1964     06A1  1903               	btfsc	3,2
  1965     06A2  2EA4               	goto	u761
  1966     06A3  2EA5               	goto	u760
  1967     06A4                     u761:
  1968     06A4  2EAA               	goto	l1188
  1969     06A5                     u760:
  1970     06A5                     l1186:
  1971     06A5  09A2               	comf	___awdiv@quotient,f
  1972     06A6  09A3               	comf	___awdiv@quotient+1,f
  1973     06A7  0AA2               	incf	___awdiv@quotient,f
  1974     06A8  1903               	skipnz
  1975     06A9  0AA3               	incf	___awdiv@quotient+1,f
  1976     06AA                     l1188:
  1977     06AA  0823               	movf	___awdiv@quotient+1,w
  1978     06AB  00F7               	movwf	?___awdiv+1
  1979     06AC  0822               	movf	___awdiv@quotient,w
  1980     06AD  00F6               	movwf	?___awdiv
  1981     06AE                     l329:
  1982     06AE  0008               	return
  1983     06AF                     __end_of___awdiv:
  1984                           
  1985                           	psect	text10
  1986     04E0                     __ptext10:	
  1987 ;; *************** function _ADC_Read *****************
  1988 ;; Defined at:
  1989 ;;		line 25 in file "Main_ADC.c"
  1990 ;; Parameters:    Size  Location     Type
  1991 ;;		None
  1992 ;; Auto vars:     Size  Location     Type
  1993 ;;		None
  1994 ;; Return value:  Size  Location     Type
  1995 ;;                  2    0[COMMON] int 
  1996 ;; Registers used:
  1997 ;;		wreg
  1998 ;; Tracked objects:
  1999 ;;		On entry : 0/0
  2000 ;;		On exit  : 0/0
  2001 ;;		Unchanged: 0/0
  2002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2003 ;;      Params:         2       0       0       0       0
  2004 ;;      Locals:         0       0       0       0       0
  2005 ;;      Temps:          0       0       0       0       0
  2006 ;;      Totals:         2       0       0       0       0
  2007 ;;Total ram usage:        2 bytes
  2008 ;; Hardware stack levels used: 1
  2009 ;; This function calls:
  2010 ;;		Nothing
  2011 ;; This function is called by:
  2012 ;;		_main
  2013 ;; This function uses a non-reentrant model
  2014 ;;
  2015                           
  2016     04E0                     _ADC_Read:	
  2017                           ;psect for function _ADC_Read
  2018                           
  2019     04E0                     l1056:	
  2020                           ;incstack = 0
  2021                           ; Regs used in _ADC_Read: [wreg]
  2022                           
  2023                           
  2024                           ;Main_ADC.c: 26:     ADCON0 |= 0x04;
  2025     04E0  1283               	bcf	3,5	;RP0=0, select bank0
  2026     04E1  1303               	bcf	3,6	;RP1=0, select bank0
  2027     04E2  151F               	bsf	31,2	;volatile
  2028     04E3                     l30:	
  2029                           ;Main_ADC.c: 27:     while(GO_nDONE);
  2030                           
  2031     04E3  191F               	btfsc	31,2	;volatile
  2032     04E4  2CE6               	goto	u541
  2033     04E5  2CE7               	goto	u540
  2034     04E6                     u541:
  2035     04E6  2CE3               	goto	l30
  2036     04E7                     u540:
  2037     04E7                     l1058:
  2038                           
  2039                           ;Main_ADC.c: 28:     return ((ADRESH<<8) + ADRESL);
  2040     04E7  081E               	movf	30,w	;volatile
  2041     04E8  00F1               	movwf	?_ADC_Read+1
  2042     04E9  1683               	bsf	3,5	;RP0=1, select bank1
  2043     04EA  1303               	bcf	3,6	;RP1=0, select bank1
  2044     04EB  081E               	movf	30,w	;volatile
  2045     04EC  00F0               	movwf	?_ADC_Read
  2046     04ED                     l33:
  2047     04ED  0008               	return
  2048     04EE                     __end_of_ADC_Read:
  2049                           
  2050                           	psect	text11
  2051     04D7                     __ptext11:	
  2052 ;; *************** function _ADC_Initialize *****************
  2053 ;; Defined at:
  2054 ;;		line 21 in file "Main_ADC.c"
  2055 ;; Parameters:    Size  Location     Type
  2056 ;;		None
  2057 ;; Auto vars:     Size  Location     Type
  2058 ;;		None
  2059 ;; Return value:  Size  Location     Type
  2060 ;;                  1    wreg      void 
  2061 ;; Registers used:
  2062 ;;		wreg
  2063 ;; Tracked objects:
  2064 ;;		On entry : 0/0
  2065 ;;		On exit  : 0/0
  2066 ;;		Unchanged: 0/0
  2067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2068 ;;      Params:         0       0       0       0       0
  2069 ;;      Locals:         0       0       0       0       0
  2070 ;;      Temps:          0       0       0       0       0
  2071 ;;      Totals:         0       0       0       0       0
  2072 ;;Total ram usage:        0 bytes
  2073 ;; Hardware stack levels used: 1
  2074 ;; This function calls:
  2075 ;;		Nothing
  2076 ;; This function is called by:
  2077 ;;		_main
  2078 ;; This function uses a non-reentrant model
  2079 ;;
  2080                           
  2081     04D7                     _ADC_Initialize:	
  2082                           ;psect for function _ADC_Initialize
  2083                           
  2084     04D7                     l1054:	
  2085                           ;incstack = 0
  2086                           ; Regs used in _ADC_Initialize: [wreg]
  2087                           
  2088                           
  2089                           ;Main_ADC.c: 22:     ADCON0 = 0x81;
  2090     04D7  3081               	movlw	129
  2091     04D8  1283               	bcf	3,5	;RP0=0, select bank0
  2092     04D9  1303               	bcf	3,6	;RP1=0, select bank0
  2093     04DA  009F               	movwf	31	;volatile
  2094                           
  2095                           ;Main_ADC.c: 23:     ADCON1 = 0x8e;
  2096     04DB  308E               	movlw	142
  2097     04DC  1683               	bsf	3,5	;RP0=1, select bank1
  2098     04DD  1303               	bcf	3,6	;RP1=0, select bank1
  2099     04DE  009F               	movwf	31	;volatile
  2100     04DF                     l27:
  2101     04DF  0008               	return
  2102     04E0                     __end_of_ADC_Initialize:
  2103     007E                     btemp	set	126	;btemp
  2104     007E                     wtemp0	set	126
  2105                           
  2106                           	psect	idloc
  2107                           
  2108                           ;Config register IDLOC0 @ 0x2000
  2109                           ;	unspecified, using default values
  2110     2000                     	org	8192
  2111     2000  3FFF               	dw	16383
  2112                           
  2113                           ;Config register IDLOC1 @ 0x2001
  2114                           ;	unspecified, using default values
  2115     2001                     	org	8193
  2116     2001  3FFF               	dw	16383
  2117                           
  2118                           ;Config register IDLOC2 @ 0x2002
  2119                           ;	unspecified, using default values
  2120     2002                     	org	8194
  2121     2002  3FFF               	dw	16383
  2122                           
  2123                           ;Config register IDLOC3 @ 0x2003
  2124                           ;	unspecified, using default values
  2125     2003                     	org	8195
  2126     2003  3FFF               	dw	16383
  2127                           
  2128                           	psect	config
  2129                           
  2130                           ;Config register CONFIG @ 0x2007
  2131                           ;	Oscillator Selection bits
  2132                           ;	FOSC = EXTRC, RC oscillator
  2133                           ;	Watchdog Timer Enable bit
  2134                           ;	WDTE = OFF, WDT disabled
  2135                           ;	Power-up Timer Enable bit
  2136                           ;	PWRTE = OFF, PWRT disabled
  2137                           ;	Brown-out Reset Enable bit
  2138                           ;	BOREN = OFF, BOR disabled
  2139                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2140                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  2141                           ;	Data EEPROM Memory Code Protection bit
  2142                           ;	CPD = OFF, Data EEPROM code protection off
  2143                           ;	Flash Program Memory Write Enable bits
  2144                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  2145                           ;	In-Circuit Debugger Mode bit
  2146                           ;	DEBUG = 0x1, unprogrammed default
  2147                           ;	Flash Program Memory Code Protection bit
  2148                           ;	CP = OFF, Code protection off
  2149     2007                     	org	8199
  2150     2007  3F3B               	dw	16187

Data Sizes:
    Strings     35
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     38      38
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_2(CODE[17]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 15
		 -> main@arr(BANK0[15]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_str@ptr	PTR unsigned char  size(2) Largest target is 18
		 -> main@arr(BANK0[15]), STR_1(CODE[18]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_str->_lcd_data
    _lcd_init->_lcd_cmd
    ___awdiv->___wmul

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    21      4    2336
                                             13 BANK0     25    21      4
                     _ADC_Initialize
                           _ADC_Read
                            ___awdiv
                             ___wmul
                            _lcd_cmd
                           _lcd_init
                            _lcd_str
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1211
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _lcd_str                                              2     0      2     241
                                              2 COMMON     2     0      2
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_data                                             2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0      44
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     244
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     452
                                              6 COMMON     5     1      4
                                              0 BANK0      4     4      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _ADC_Read
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _lcd_cmd
   _lcd_init
     _lcd_cmd
   _lcd_str
     _lcd_data
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     26      26       5       47.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Jan 19 16:03:58 2023

                      pc 0002             lcd_data@data 0071                       l30 04E3  
                     l33 04ED                       l50 0601                       l27 04DF  
                     l53 058C                       l62 050C                       l59 0557  
           ___awdiv@sign 0021                       fsr 0004      ___wmul@multiplicand 0072  
                    l172 07FB                      l176 0519                      l329 06AE  
                    l178 0531                      l448 0645                      l458 05C6  
                    l960 05CD                      l970 05E1                      l962 05D1  
                    l980 05FB                      l972 05ED                      l964 05D5  
                    l974 05F1                      l966 05D6                      l958 05C8  
                    l990 0564                      l982 0559                      l976 05F5  
                    l968 05DB                      l992 0569                      l984 055E  
                    l978 05F6                      l994 056F                      l986 055F  
                    l996 057B                      l988 0563                      l998 057C  
                    u410 060A                      u411 0609                      u500 05A5  
                    u405 0572                      u501 05A4                      u430 061C  
                    u510 05AF                      u431 061B                      u511 05AE  
                    u600 079D                      u425 060E                      u601 079C  
                    u450 062D                      u530 05C2                      u610 07E7  
                    u451 062C                      u531 05C1                      u515 05AB  
                    u611 07E6                      u540 04E7                      u620 07F7  
                    u541 04E6                      u445 061D                      u525 05B6  
                    u621 07F6                      u710 067B                      u630 0513  
                    u550 0557                      u470 0641                      u711 067A  
                    u631 0512                      u551 0556                      u471 0640  
                    u455 0629                      u480 0593                      u560 072E  
                    u705 066D                      u465 0635                      u481 0592  
                    u561 072D                      u730 068C                      u570 0766  
                    u731 068B                      u395 05E4                      u571 0765  
                    u660 052D                      u580 078C                      u725 067C  
                    u661 052C                      u645 051A                      u581 078B  
                    u750 06A0                      u670 064D                      u590 0797  
                    u751 069F                      u735 0688                      u671 064C  
                    u655 0521                      u807 05D8                      u495 0597  
                    u591 0796                      u760 06A5                      u680 0658  
                    u761 06A4                      u745 0694                      u681 0657  
                    u817 05F8                      u585 0788                      u690 0669  
                    u691 0668                      u777 071A                      u787 0566  
                    u797 0583                      fsr0 0004                      indf 0000  
                   l1000 0580                     l1002 0581                     l1010 060A  
                   l1004 0586                     l1020 062D                     l1012 060D  
                   l1022 0633                     l1014 0614                     l1006 0602  
                   l1110 079D                     l1102 0771                     l1024 0634  
                   l1016 0618                     l1008 0604                     l1040 05A1  
                   l1032 058D                     l1120 07DA                     l1112 07A2  
                   l1200 06C8                     l1026 063B                     l1018 061C  
                   l1042 05A5                     l1034 0593                     l1050 05C2  
                   l1122 07DE                     l1114 07A6                     l1106 078D  
                   l1210 070B                     l1202 06CE                     l1140 0520  
                   l1028 0641                     l1044 05AF                     l1036 0596  
                   l1116 07A9                     l1108 0797                     l1124 07E7  
                   l1212 0714                     l1204 06D7                     l1054 04D7  
                   l1150 0649                     l1142 0527                     l1134 050D  
                   l1062 04EE                     l1070 0547                     l1046 05B5  
                   l1038 059D                     l1118 07D5                     l1126 07F7  
                   l1206 06F9                     l1056 04E0                     l1160 065D  
                   l1152 064D                     l1144 052D                     l1136 050F  
                   l1064 0532                     l1048 05BC                     l1080 0738  
                   l1072 0725                     l1208 0705                     l1058 04E7  
                   l1170 0673                     l1162 0661                     l1154 0652  
                   l1138 0513                     l1066 0533                     l1090 0762  
                   l1234 074B                     l1074 0728                     l1180 0693  
                   l1172 0677                     l1164 0663                     l1156 0654  
                   l1148 0646                     l1068 0541                     l1092 0766  
                   l1084 0739                     l1076 072E                     l1182 069A  
                   l1174 067B                     l1166 0669                     l1158 0658  
                   l1094 076A                     l1086 0756                     l1078 0733  
                   l1176 068C                     l1168 066C                     l1184 06A0  
                   l1096 076F                     l1088 075E                     l1192 06AF  
                   l1186 06A5                     l1178 0692                     l1194 06B3  
                   l1188 06AA                     l1196 06B8                     l1198 06BD  
                   STR_1 001D                     STR_2 002F                     _main 06AF  
                   btemp 007E         __end_of_ADC_Read 04EE                     start 0000  
                  ?_main 002D          __end_of___awdiv 06AF          ___awdiv@divisor 0076  
        __end_of___lwdiv 0646          __end_of___lwmod 05C7          ___awdiv@counter 0020  
                  _PORTC 0007                    _PORTD 0008                    _TRISC 0087  
                  _TRISD 0088          __end_of_lcd_cmd 0602          __end_of_lcd_str 0558  
        __end_of_dpowers 001D                    pclath 000A                    status 0003  
                  wtemp0 007E          __end_of_sprintf 07FC          __initialization 07FC  
           __end_of_main 0722                   ??_main 0031                   _ADCON0 001F  
                 _ADCON1 009F                   _ADRESH 001E                   _ADRESL 009E  
       ___awdiv@dividend 0078         __end_of_lcd_data 058D         __end_of_lcd_init 050D  
                 ___wmul 050D                ??___awdiv 007A                ??___lwdiv 0074  
              ??___lwmod 007C         ___awdiv@quotient 0022                ??_lcd_cmd 0070  
              ??_lcd_str 0074                ?_ADC_Read 0070                ??_sprintf 0023  
__end_of__initialization 07FC           __pcstackCOMMON 0070               ??_ADC_Read 0072  
             __pmaintext 06AF                  ?___wmul 0070                ?_lcd_data 0070  
              ?_lcd_init 0070               __stringtab 0003                  ___awdiv 0646  
                ___lwdiv 0602                  ___lwmod 058D                  __ptext1 0722  
                __ptext2 058D                  __ptext3 0602                  __ptext4 0532  
                __ptext5 0558                  __ptext6 04EE                  __ptext7 05C7  
                __ptext8 050D                  __ptext9 0646                  _lcd_cmd 05C7  
                _lcd_str 0532                  _dpowers 0013               ??_lcd_data 0070  
                main@arr 0033                  _sprintf 0722               ??_lcd_init 0072  
   end_of_initialization 07FC               lcd_cmd@cmd 0071               lcd_str@ptr 0072  
         __end_of___wmul 0532           _ADC_Initialize 04D7      start_initialization 07FC  
               ??___wmul 0074   __end_of_ADC_Initialize 04E0                ___latbits 0002  
          __pcstackBANK0 0020              sprintf@flag 0027              sprintf@prec 0028  
       ___lwdiv@dividend 0072                 ?___awdiv 0076                 ?___lwdiv 0070  
               ?___lwmod 0078          ?_ADC_Initialize 0070                __pstrings 0003  
               ?_lcd_cmd 0070                 ?_lcd_str 0072                 _ADC_Read 04E0  
       ___lwdiv@quotient 0075                 ?_sprintf 0020           ___wmul@product 0074  
               _GO_nDONE 00FA              __stringbase 0012        ___wmul@multiplier 0070  
     __end_of__stringtab 0013               sprintf@val 0029          ___lwdiv@divisor 0070  
        ___lwdiv@counter 0077                 __ptext10 04E0                 __ptext11 04D7  
               _lcd_data 0558                 _lcd_init 04EE                 main@data 0042  
               main@argc 002D                 main@argv 002F                 main@temp 0044  
              sprintf@ap 0026                sprintf@sp 002B         ___lwmod@dividend 007A  
       ??_ADC_Initialize 0070                stringcode 000D                 sprintf@c 002C  
               sprintf@f 0020          ___lwmod@divisor 0078          ___lwmod@counter 007D  
               stringdir 000D                 stringtab 0003  
